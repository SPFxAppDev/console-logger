{"version":3,"sources":["../../src/functions/library/isset.ts","../../src/functions/library/isNullOrEmpty.ts","../../src/functions/library/getUrlParameter.ts","../../src/functions/library/toBoolean.ts","../../src/functions/index.ts","../../src/library/Logger.ts","../../src/library/decorators/decorators.utility.ts","../../src/library/decorators/class.decorators.ts","../../src/library/decorators/method.decorators.ts","../../src/library/decorators/property.decorators.ts","../../src/library/decorators/logFactory.decorators.ts","../../src/index.ts","App.ts"],"names":[],"mappings":";;;;;;;AEAA,ADAA,ADAA,AGAA,AECA,AEDA,ADAA,AIAA,AFAA,ACAA;;AFEA,AGDA,AFAA,ACAA;;APCA,ADAA,AEAA,AOCA;AVEc,SAAU,KAAV,CAAgB,QAAhB,EAA6B;AACvC,AUNJ,IAAA,KVMW,AUNX,OVMkB,EUNlB,MVMW,KAAoB,WAApB,IAAmC,QAAQ,IAAI,IAAtD;AACH;AUFD;AACO,IAAM,AENb,GFMgB,GAAkH,SAArH,GAAqH,CAAC,OAAD,EAA2G;ARE/N,ADAA,AEAA,AOFqH,MAAA,GRE3G,ADAA,AEAA,IOF2G,KPErH,AOFqH,CPEjG,GFApB,CAAwB,ASF6F,CRErH,ACAA,AOFqH,CRE3F,CCAI,AOFuF,KTErH,EAAqC,KCArC,EAAiD,GAAjD,EAAmE;AAAlB,ADC3D,AEAA,AOH+H,AELnI,IFKmI,AELnI,EVO+D,ADCvD,AEAA,CFAC,AEAA,EDDsD,EQFoE,AELnI,GVO+D,AQFoE,AELnI,IFKmI,CREpE,CAAA,CUP/D,CVO+D,AUP/D,KXQe,AEAA,KAAN,CAAL,EFAK,AEAc,CFAnB,EAAsB,CWR1B,CAAA;AVO+D,ADEvD,AEAA,AGRD,AIIsO,IRE9K,AINlD,GJMkD,GAAA,CDEhD,AEAA,AGRK,GJM2C,AIL/D,CLOQ,CEAA,OGRK,OACb,CAAC,MAAD,EAAc,oBAAd,EAA4D,eAA5D,EAAqF,OAArF,EAAqG;AJKpB,ADG5E,AEAA,AGRkG,AMDvG,IAAA,ENCuG,OAAA,GAAA,EAAA,SMDvG,GAAA,OAAA,CAAA,oDAAA,CAAA;AFMI,MAAM,eAAe,GAA4B,SAA3C,eAA2C,GAAA;AREjD,ADGA,AEAA,AOLkD,AEFtD,IAAA,EVIQ,ADGA,AEAA,CGV+F,CIKjD,GJLiD,AMGvG,CFEsD,CTKvC,AEAA,AGVwF,CMGvG,CFEsD,CJLiD,CIKjD,CPK9C,CGV+F,ELU/F,AKV+F,EHU9E,CGV8E,ELU3E,AWP5B,MTOI,CGVmG,CJOjF,ADGlB,AEAgC,AGVmE,ELUjE,CCH9B,CAAJ,EAAwB,EIP2E,EAAA,IAAiB;AJQhH,ADGA,AEAA,AGX+F,AMMnG,IVEI,AIR+F,GJQ5F,GAAG,CDGC,AEAA,AGXwF,AMMnG,CNNmG,EAAA,EJQnF,ACGZ,CDHa,AIRkF,CAAA,AMMnG,CXKmB,AKXgF,CLW/E,CWLpB,CNNmG,ELWxF,CCHD,CAAgB,CDGC,GCHvB,CIR+F,CAAA,CLWxF,CKXwF,CAAA,CLW/D,CAAhC;ACFH,ADGA,AEAA,ASLG,SFF8C,AEEzC,IFFyC,EAAA,AEE9C,GFF8C,AEEhC,GFFgC,CEE5B,CFF4B,GAAA,GEE5B,CAAA,KFF4B,CAAA,AEEhC,CAAW,OFFqB,EAAA,GEEhC,CFF8C,AEE5D;AFF8C,AEGjD,MFHiD,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;ARMlD,ADGA,AEAA,AGbA,EJUA,GAAG,CDGC,AEAA,AGbE,CLaD,CCHC,GAAG,CAAC,CCGC,EFAE,CAAC,EEAV,EGbgB,GJUd,ACGe,AGbW,EJUhC,KDGK,CAAwB,AEA7B,AGbuC,EHaR,IGbc,CAAC,CLazC,CAAL,EAAwC,IKbK,CAAb,MAA4B,QAA5D,CADiG,CAC3B;AJWtE,ADGI,AEAA,ASLG,EAAA,ETKH,EDHA,GCGK,ASLF,CVEC,AUFD,CXKI,CEAC,CDHO,GDGf,CEAa,CAAC,CSLX,CAAA,MVEyB,CAAC,CUF1B,CTKK,EAAR,ASLJ,OVEmB,EAAnB,GUFA;AVGA,ADGC,AEAA,AGdD,AIII,AEKA,EVEJ,IAAI,AIXA,GJWG,AUFE,GFLG,CROD,CAAC,CUFR,CFLY,AEKA,CFLC,EEKb,CAAgB,CVEb,AIXY,CJWC,CQPhB,CJJuB,IJWpB,EAAqB,MAArB,AUFH,EVEgC,AIXK,GAAI,IJWtC,CAAqC,CIXe,CAAC,IJWrD,EAA6C,AIXP,CAAsB,KJW5D,CAAP,YIX6C,EAAJ,GAAiD,eAAO,eAAjG;AJaA,AIZA,AIIQ,AEKJ,ENTJ,IJYM,GUHG,EFLI,CRQD,AQRJ,GRQe,AUHnB,CAAY,CNTD,CAAC,CMSZ,CAAgB,MVGc,IAAX,EIZvB,CJYyC,AUHrC,ENT6B,SJYjC,WIZA;AFNJ,AFmBI,ADEA,AEAA,AGdA,AIGgB,AEMZ,MVGE,ACED,AGdC,GLcC,AWLE,EVGE,ACED,CGdE,EJYU,CIZC,AMSnB,CTKW,ASLC,CXKD,CCFW,ADEV,CKdW,AMSvB,CAAgB,GTKf,CDFiB,ADEf,CCF0B,EDER,AEAC,CFA1B,GCFsB,CAAtB,ACE+B,CGdR,CAAW,AMS9B,GTKgC,MAAhC,IACC,EGfkB,EAA4B,CHezC,KAAK,GAAV,IAAiB,EGfC,CAAvB,EHe2B,KAAK,GAD5B,IAEC,KAAK,KAAK,CAAV,IAAe,KAAK,KAAK,CAF9B,EAEkC;ADHlC,ADEH,AEEO,AGhBJ,AIGY,AEMX,ENTD,CMKO,GVOD,EIZA,CAAC,EHgBI,CObK,CRSH,GAAoB,ACI7B,GObmB,ERSe,AIZtC,CJYuC,AIZpB,CIGQ,CAAC,CAAD,CRSM,AQTjB,CRS4B,AIZ5C,CAAA,EJYiC,CAAjC,AQTmC,GJHnC,EAAM,GIGU,IAA+B,MJHzC,CAAA,AIGgD,CJHlC,GIGsC,CAAC,CAAD,CAAX,CJHzC,CAAA,EAA0B,CIGkC,MJH5D,CAAN,IIGY,EAAmE;ANVnF,ADwBK,AGhBJ,AIGmB,CJVb,gBIUoB,8BAAe,OAAf,EAAwB,KAAxB,CAA8B,KAA9B,EAAoC,IAApC,CAAP;ARUhB,AQTa,AEMN,EAAA,IVGH,GUHG,CAAA,GVGI,IAAI,EUHR,CAAA,CVGP,EAAqB,cUHd,GAAP,UAAyB,CAAzB,EAAoC,CAApC,EAA6C;ARjBjD,AFqBQ,ACIJ,ASPI,STOI,ASPC,EVGE,GCIE,CDJT,AUHA,CAAY,GTOE,ASPd,CAAgB,MTOZ,IAAqB,KAAK,KAAK,GAA/B,ESPJ,ETO0C,ASPC,CAA3C,EAA8C,CAA9C,CTO+C,KAAK,CAAjD,GAAsD,KAAtD,GAA8D,IAArE;ADHC,ACIJ,AEzBD,AECA,AGUgB,AFVhB,ACAA,AGiBQ,IPlBF,AECA,ACAA,ACAA,KGiBO,MPlBI,AKWM,AEOf,CAAY,EPlBwB,AECxB,ACAA,ACAA,CGiBZ,CAAgB,CLjB6B,ACAC,ACAE,YGiBhD,QFP4B,OAAb,EAAsB,KAAtB,CAA4B,KAA5B,EAAkC,IAAlC,CAAP;ANXhB,AOHA,ANII,AECA,ADMG,AENH,ACAA,AGiBI,EPlBJ,AECA,ACAA,ACAA,EHMS,KMWA,EPlBA,EAAE,EOkBP,CAAY,CPnBwB,EEEvB,ACAA,ACAA,AGiBb,CAAgB,CLjBD,ACAA,ACAA,IFD8B,ACAC,ACAE,CHOrB,GAA6E,SAAnG,KMWL,EAAyC,CAAzC,EAA4C,CAA5C,WNXwG,CAAC,MAAD,EAAc,iBAAd,EAAgD,aAAhD,EAA0E;AJetL,AGrBA,AECA,ADK0H,AIIlH,AFTR,ACAA,AGiBC,EPlBD,AECA,ACAA,ACAA,CGaO,GNRmH,GJenH,EQXM,CAAL,CLVG,EAAE,CHqBC,CAAC,CAAD,CAAd,AGvBwC,GEGpB,ACAA,ACAA,CHKsG,CCLpG,ACAA,ACAA,IFF2B,ADOyE,KAAA,CAAA,EAAA;AJgB7H,AS1BD,ANKI,AECA,ADI0H,AII1G,AFXkC,ACAE,CDAxD,ACAA,CJEI,AECA,EDI0H,MCJlH,EFDE,AECA,EFDE,IAH4B,GCQkF,GAAA,IAAA;ADJ1H,AEHiD,ADOyG,AIK9I,AESL,CLrBX,CFGI,AOkBO,CLfX,MKeW,CAAA,CPlBE,EAAE,EKSQ,ELbqB,EOsBjC,CAAA,QAAA,GAAP,YAAA,EFTkC,OAAf,EAAwB,KAAxB,CAA8B,KAA9B,EAAoC,IAApC,CAAP;ALRZ,AGCG,ACAA,AGiBC,EPlBJ,EGCS,ACAA,KGiBA,IPlBE,EAAE,AOkBT,CJjBiB,AIiBL,EHjBO,CJNiB,AGMiC,AIiBrE,CAAgB,CHjB0D,ODArE,ECAA,UDAgE,CAAC,GCAI,CAAC,GDAN,EAA8C,CIiBnH,CHjB0E,EAAgD;AJA9H,AEGJ,ADDgK,AIMpJ,AFRkE,ACAK,AGkB3E,EPlBJ,ICE4J,AEFlF,ACAK,GGkBtE,EFVI,CLRH,AKQF,CFRkE,ACAK,CJAnE,COkBR,CAAY,EJlB0D,ACAK,CHE6E,CMgBxJ,CAAiB,EJlBqD,ACAK,CHE6E,AEFlF,ACAK,EDAL,ACAK,GHE6E,CAAA,EAAA,oBMgBxJ;APxBoC,ACQoH,AIM5I,AFR0D,ACAK,AGmB3E,CPzBR,GCQgK,AEFlF,ACAK,KGmBtE,EJnBiE,ACAK,GDAL,ACAK,CGmB3E,CAAY,CNjB4I,CEFlF,ACAK,EHE6E,AMiBxJ,CAAiB,CNjBuI,8BMiBxJ;APhBR,ACD0L,AIO1K,AFT2G,ACAO,AGoB1H,IPjBF,KOiBO,MAAL,CAAY,KAAZ,CAAkB,GPjBC,GAAoB,yBOiBvC;APhBJ,AKMY,AEWR,EPjBJ,OOiBS,MFXU,AEWf,CAAY,KAAZ,CAAkB,CAAC,OPjBK,EAAE,OKMC,ELPY,KKOxB,EAAqB,KAArB,CAA2B,AEWxB,CAAlB,IFXe,EAAiC,IAAjC,CAAP;ALLZ,ACFA,AEDA,ACAA,AGoBC,EPjBD,AGHA,ACAA,CGcO,GNbH,GEDG,ACAA,GDAA,ACAA,QDAA,ACAA,CHCY,AEDZ,ACAA,GHCuB,EAA9B,GEDO,ACAA,CDAA,ACAA,EJGuB,AGHvB,ACAA,EJGyB,AGHlB,ACAA,cDAP,ACAA,CDAA,ACAA,EDA0B,ACAA,KJCU,EGDpC,ACAA,CDAP,ACAA;AJIA,AKKQ,AFPR,ACAA,EJEA,OGFO,ACAA,OJEO,EAAE,CGFR,ACAA,MDAD,ACAA,EDAiB,ACAA,WDAjB,CCAA,CDAsC,CCAD,SDArC,EAAmF;AHD/C,AEKxC,ADHH,AIMiB,AFLb,ACAA,AGiBR,CPpBA,GEKa,EDHL,EECM,ACAF,CGiBZ,INlBe,ECGS,CKexB,ELf2E,ICF/C,GAAQ,EDEvB,CEFmB,EHDxB,CGCmD,IHDtB,AECS,CAAC,EDE4B,AEFT,CFEU,AEFT,EDA3D,EFDJ,EAA2C,CCG4B,EAA6C,WEF7D,IAAgC,eAAO,eAAP,CAAuB,cAA1G;AJSR,AEP4E,ADFpE,AIMQ,ADLR,AGVR,CAAA,EAAA,CPkBY,ACTJ,ECEoE,EED9D,GJQd,EEP4E,CGItD,IHJsD,AGIlD,CJNH,GAAG,CCEkD,AGItD,ADLO,CFC+C,AGI5C,EHJ4C,AEDpC,aHDhC,QIMc,CAAN,kBDL+C,MAAvB,EAA+B,OAAO,CAAC,iBAAvC,EAA6D,MAAM,CAAC,WAAP,CAAmB,MAAnB,IAA0B,GAA1B,GAA8B,YAA3F,CAAhC;AFCoE,ADDvE,AIPG,AFQA,GFHJ,CCGwE,ACApE,KFDG,ECCiE,GAAA,ACA1D,CAAC,GDAyD,ECApE,GAAmB,YAAA;ADA6F,ADAhH,AIMH,AFHO,ACFJ,AGgBR,GF1BI,CE0BE,INjBQ,AGCA,EDEE,KCFK,GAAkD,EGgBjD,GAAoB,IHhB5B,GDEsB,CFHC,EEG0B,CFHd,AGCsB,CAAC,KDEF,CFHd,AEGe,CCFA,EAAiB,GHD1B,CAAC,aEGA,GFHD,CAAb,AEG8C,KFHV,UAApC,AEGqD,IFHH,OAAQ,IEGZ,CAAuB,CFHG,CAAC,YEG9G,EFH+F,EAAR,KAA4C,QAAvI;ADOR,ACNQ,AEGI,ACH8E,AGiBtF,CPXJ,COWI,ENjBI,MEGU,ACHwE,CJM9E,MIN8E,CJM1F,CCNuB,CDMJ,AINuE,EHAhE,AGAgE,GDGzD,GAAW,EIcZ,EAAE,WADQ,ENhBO,GAAI,MAAc,CAAC,aEGD,CFHd,EAAJ,GAAsC,AEG3C,EAA+B,OAAO,CAAC,GFH3E,cEGoC,EAA0D,WAA1D,CAAhC;AHIR,AENA,ADAC,AIMD,AEWA,EPXA,AENA,AKiBA,OPXA,AENO,AGMA,CLAP,EENO,KFMP,CAAA,EENO,CAAA,GGMP,GLAA,CAAA,CENO,CAAA,CFMP,CAAA,AENO,AKiBuB,CPX9B,CENc,AKiBkB,EPXhC,SAAA,GENO,CAAA,AKe+B,ELfL,OAA1B,CAAP;AFOA,AKAH,AFHW,AIcR,CF/BG,CLoBH,AOWA,OPXA,CAAA,AGHc,CCLwE,IAAA,CGmBxE,CPXd,AGHqB,ACLiE,CJQtF,AOWgB,EJduD,ACLe,GAAA,CJQtF,CAAA,AIRsF,GJQtF,AIRsF,CJQtF,AGHc,CHGd,GAAA,GGHuE,CAAC,ACLc,CAAA,CJQtF,KGHuE,EAAiB,ACLF,EAAA,IAAiB;AJSvG,AENA,ADAA,AEE0F,ACLJ,AGoBlF,EPXJ,EOWI,ELjBE,EEHgF,CJStF,ACNO,CDMP,EGJ0F,CIe7E,EHpByE,AGoBvE,CHpBuE,CJStF,CAAA,AITsF,CDKI,CIc1E,CLhBK,AEHiE,CDKI,ACLJ,CAAA,CFGT,ADA7E,AEE0F,CHI1F,CAAA,AITsF,GJStF,CAAA,CAAA,EENM,CFMN,CITsF,CAAA,EAAA,CAAA,EJStF,OEN6E,CAAoC,IAApC,EAA2C;AFOxH,AENI,ADAP,AMiBO,CN5BD,CDiBH,EOWI,KPXJ,CAAA,KOWe,EPXf,AOWiB,CPXjB,GOSgB,IPThB,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;AACA,AENI,AKiBA,EPXJ,EOWI,ILjBM,CFMV,CAAA,GGN0F,CIiB5E,ELjBI,AKiBF,CPXhB,AGN0F,CHM1F,CENwB,ACAkE,EIc1E,CJd0E,CHM1F,AENI,CFMJ,CGN0F,EHM1F,AGN0F,CHM1F,CAAA,CGN0F,EHM1F,KAAA,EGN0F,CAAA,QAAA,EAAA,IAAiB;AHO9G,AENO,ACDsF,ACJlF,AGsBJ,CPjBR,EAAY,COiBJ,ILjBM,EFAK,AGD2E,GIkB7E,EAAE,EJlB2E,CAAA,EDCpE,ACDoE,AIc1E,GLbkB,ACDwD,CAAA,CAAA,CCJvE,EDIuE,GDCxC,AEL1C,CAAW,CJKX,EEA+C,ECDmC,ACJvE,CDIuE,ACJlF,EJKO,AGD2E,ACJvE,CDIuE,EHC3E,AEAwD,CAAC,CFAzD,CAAnB,EEAsC,GAA8C,EEL7D,CAAA,CAAC,IFK4E,CAAC,CEL9E,EAAS,CFKM,GAAsE,EAApG,cELe,EAA+B,eAA/B,EAAgD,OAAhD,CAAA,EAA4D,OAA5D,CAAX;AFOJ,AENC,AGsBD,IAAA,CHxBA,GFQM,OKgBK,EAAE,KALD,MLXc,GAA2B,OAAO,CAAC,oBAAR,IAAgC,eAAO,eAAP,CAAuB,cAA5G;AFeR,AEdQ,ADHD,AMmBC,IPFR,ACjBa,AMmBL,ILhBM,EFcd,GAAA,COEkB,EAAE,ENnBO,GAA0B,ECGxB,EFc7B,CEdwC,IDH3B,cAAwC,GAAA,mBCGU,QAAvB,EAAiC,OAAO,CAAC,iBAAzC,EAA4D,YAA5D,CAAhC;AFoEJ,ACtEA,AEDY,ACFR,AGeY,QHfN,CHGH,EDsEP,MAAA,CAAoB,MCtEN,IEDS,EHuEvB,AIzEgC,EJyEkB,CGvEtC,ACFgC,CDErB,KFCvB,AEDuB,CHuEvB,AGvEY,ACFuC,EJyE+B,AGvE3D,aAAA,CAAA,CAAC,GCFoB,GDErB,EAAS,ACF4C,WAAhC,IAA+C,KDEpE,EAA+B,aCFyD,EDExF,EAAgD,CCF6C,IAAhH,EDEmB,CAAA,EAA4D,OAA5D,CAAX;AHuEsC,AElE9C,ADHP,AEDY,ACFL,AGWkC,CNVnC,AMUP,GHXQ,GDAI,CHwE0C,AElExC,QFkEwC,KAAA,GIxE1B,EJwE0B,AElEtB,CFkEsB,AIxEvB,EJwEuB,AElEL,SAAnC,WENuC,GAAG,IFMP,GAAA,aENI,GAA0B,eAAO,eAAP,CAAuB,cAA9F,CAVwC,CAYxC;AJsE8C,AEjE1C,AKiBZ,MPgDsD,COhDtD,CAAA,KLjBmB,CFiEmC,AOhDtD,CAAO,EPgD+C,IAAA,SOhDtD,GAAyB,gBAAzB,ILjB0C,QAAvB,EAAiC,OAAO,CAAC,iBAAzC,EAA4D,YAA5D,CAAP;AFiE0E,AEhE7E,ACJG,ACDJ,AGuBR,IAAM,CLpBE,AKoBD,GHvBK,AGuBO,EJtBD,ECDF,AGuBO,GHvBE,IGuBN,EHvBoB,AGuBvC,CHvBwC,UDCA,ECDD,CDCa,ACD5C,CAbwC,CAexC,KDDmD,oBAAP,KAAgC,WAAhC,IAA+C,oBAAoB,KAAK,IAAhH;AACA,AIsBZ,CAAC,CAAC,IJtBU,IIsBZ,gBJtBgC,GAAG,sBAAsB,GAAG,oBAAH,GAA0B,eAAO,eAAP,CAAuB,cAA9F;AHmEY,AE9DhB,AEJA,AGsBR,CAAC,CAAC,MLlBY,AEJA,CJkEU,KIlEJ,CFIC,EEJO,CFI2C,CKkBvE,CAAoB,CP4CI,GAAA,EIlEV,CFIA,KEJc,EFI2C,CAAC,AEJ5C,CJkEJ,ME9D+C,EAAiB,KKkBxF,EAAmD,CAAnD;AP4CsD,AE9DoC,ACH9E,ACAA,AGsBZ,CAAC,CAAC,IHtBU,GJiE0C,CE9DoC,ACH1E,AIsBhB,GHtBmB,CAAC,GJiEkC,AE9DoC,ECHjE,CHiE6B,AE9DoC,EAAA,CCH7D,KHiEyB,EIjE1B,EDAU,CAAC,ACApB,EAAc,IDAJ,GAAmB,CAApC,EAAuC,ACAV,YAAR,GAAoB,MAApB,GAA2B,IAAzC,CAAP;AJeA,AGdI,ACAJ,QDAI,CHcJ,IIdO,EDAI,CAAC,CCAZ,YJcA,GAAgC,AGdZ,GAAT,EAAc,CAAI,GHc7B,QGdwC,GAAA,oBAAf,EAAqC,SAArC,CAAd,CAAP;AHgBJ,AGfC,ACAJ,AG8BT,IAAA,CHjCQ,CAhBwC,CDiBpC,ACIJ,EJaI,EEd8E,ECDvE,EDCuE,EAAA,GAAA,GAAA,EFc9E,AEd8E,AK6B1F,GPfyC,AEdiD,AK6B1F,SPfY,AEd8E,CAAA,EK6B1F,ML7B0F,EAAA,IAAiB;AAAjB,ACA1E,AI6BhB,QL7B0F,ACA1E,GI6BhB,IL7B0F,ACAnE,CDAmE,ACAlE,EDAkE,GAAA,CAAA,CAAA,GAAA,MCA1D,AI6BhC,GL7B0F,ACAnE,AI6BvB,CL7B0F,CCAlD,CDAkD,CAAA,SCAvC,GAAA,QAA5B,CAAP;AH+DR,AG9DK,AI+BF,QP+BA,CAAC,AO/BD,MAAA,GAAiB,EAAjB,WP+BO,QAAN,CAAJ,EAAqB;AACjB,AI9DJ,AGoEP,QHpEa,GJ8DG,GI9DG,GAAQ,EJ8DhB,GAAgB,II9Dd,EJ8DoB,CAAC,GI9DP,CAAA,MAAA,EAAM,GJ8DtB;AACH,AEhEG,ACEA,ACAA,MAAA,IDAM,GCAC,CAAC,EDAI,GAAQ,ODFT,IEEK,CFFhB,CAAW,CCEuB,ACA3B,CDA4B,CCAd,EFFV,CAAX,CCEoB,CDFT,ACE8B,IAArB,CCAS,CDAkB,ODFpC,CAAA,CAAC,ACEQ,CAApB,CCAqB,GAAoB,GFF9B,EAAW,CEED,GAA2B,MAAzC,CAAP,SFFW,EAAiC,eAAjC,EAAkD,OAAlD,CAAA,EAA8D,OAA9D,CAAX;AFiEP,AEhEI,AEEG,AG+BD,EAAA,GLnCH,CEII,IAAI,GAAG,MAAP,IG+BD,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;AJ9BQ,ACAH,AG+BD,KHlCA,CAtBwC,CA2BxC,EG6BK,CJ/BE,EAAE,GI+BT,CAAY,EJ/BG,CI+Bf,CAAgB,UJ/BW,GI+B3B,IJ/BO,CAAH,EAAiC;AHWzC,AEZI,ACEQ,AI+BX,EPrBD,COmBO,KPnBP,AEZU,ACEE,CHUZ,MGVmB,CAAC,OHUpB,AEZyB,CFYb,EEZuC,IFYvC,CAAA,CGVgB,GDFlB,ACES,EAAiB,GHUpC,EAAY,MGVmC,EDFI,CCEJ,EDFI,ICEhC,CAAP,OHUZ,EAAiC;AEXzB,ACEI,SHSZ,IEXe,ECEI,MAAP,GHSZ,sBEXQ;AFYJ,AEXC,ACEI,ACAL,AGgCG,EAAA,GLpCH,GEII,OAAS,MAAc,CAAC,CGgCzB,CAAA,SAAA,CHhCwB,AGgCxB,CHhCH,EAA4C,cGgCzC,GAAP,UAAyB,CAAzB,EAAoC,CAApC,EAA6C;APtBzC,AIRI,AG+BJ,SAAK,CPvBF,KOuBH,CAAY,GAAZ,CAAgB,YPvBP,KAAK,QOuBd,EAA2C,CAA3C,EAA8C,CAA9C,MPvBG,CAAH,EAAqC;AACjC,AEXJ,ACEI,ACCA,AG+BJ,MH/BI,EFHA,CKkCC,GH/BK,CDDC,ACCA,EJQA,AEXA,AKkCX,CLlCY,AKkCA,GAAZ,CPvBgB,AGTE,AIgCF,CJhCG,GDFnB,EAAsB,CEGlB,CDDO,ACCe,CDDC,IIgC3B,CH/BI,CDDO,CCCuB,CDDC,GHS/B,CGTO,CAA6B,MCCpC,EAA4C,EDDP,KAAD,EAAM;AHU7C,AEXG,ACEI,ACCA,AG+BR,MLlCI,CFOR,CAMI,AGXQ,ACCA,CG+BH,EH/BM,EAAE,CFHD,CAAC,ACEE,AIgCf,CJhCgB,AIgCJ,GHhCoC,AGgChD,CAAgB,ILlCZ,CAAmB,OCEC,GAAT,EAAiB,EDF5B,GAAoC,CKkCxC,EAAyC,CAAzC,EJhC2C,AIgCC,CAA5C,EJhC2C,MAA5B,CAAP,EDFJ;AACA,ACEI,ACCA,AG+BX,GAJM,GL9BC,EEGI,GAAG,EAAE,CFHD,CAAC,ACEE,ICDiC,CDCxC,IDFJ,CAAmB,GAAnB,GAAyB,OAAzB;AACA,ACEC,ACCG,MFHJ,CCDO,CCIH,CDDD,KDFK,ACDD,CDCE,ACEA,GCCK,EAAE,IFHhB,AEA4C,CFAzB,ACET,KAAD,EAAM,ODFf,GAAoC,eAApC;AFYJ,AEXC,ACEO,ACCA,AGgCL,EAAA,GLvCH,GCMQ,ACCA,EJQJ,CEXG,ICEQ,CAAC,ICCI,EAAE,CGgCnB,CPxBe,AOwBf,GPxB0B,KGTL,CIiCrB,CAAA,GJjCY,EAAgB,GIiC5B,GAAP,YAAA,EPxBiD,GGTO,EHSF,QAAL,CAAc,AGT5C,CAAP,6BHSqB,CAA7B;AEVI,ACEI,ACJwC,AGqChD,MLnCI,CEFA,CDII,CIiCH,KLnCO,CAAC,ACEE,AIiCf,CJjCgB,EIiCF,MLnCV,CAAmB,OCEC,KAAT,EDFX,ACE2B,GDFS,ECEzB,CAAP,IIiCR,CLnCgD,CAAC,SAAT,CAAmB,cAAnB,IAAqC,kBAAzE;AFYJ,AEXI,ACEI,ACCP,AGgCD,MLnCI,ECEI,CIiCH,CPxBD,CAAC,GEXO,CAAC,ACEE,AIiCf,CJjCgB,AIiCJ,GAAZ,CAAgB,ILnCZ,CAAmB,AKmCF,GLnCjB,GAAyB,AKmC7B,CJjCwB,CHSb,EGTI,EAAiB,EDFK,CAAC,OFWjC,CAAL,AGT2C,CDFd,CFWD,AEXoB,CCEL,EDFd,IAA0B,ACExC,CAAP,MDFJ;AFYA,AEXA,ACEI,ACCX,AGgCG,GHtEJ,GFmCQ,GKmCC,IPxBI,CEXG,CAAC,ACEE,AIiCf,CAAY,IAAZ,CAAiB,CJjCK,CAAC,CDFnB,CAAmB,CKmCD,GJjCP,CAAe,EIiC9B,CPxBI,EGTW,CHSiB,AGTxB,GDFJ,EFWA,CEXoC,QAAQ,CAAC,SAAT,CAAmB,cAAnB,IAAqC,eAAzE;AFYA,AEXH,ACEI,ACCZ,AGgCO,CH3ED,IFYqH,CA8BpH,CCRW,CAAP,CIyCC,MPxBM,AOwBX,CAAY,IPxBI,AOwBhB,CAAiB,KAAK,MAAtB,QPxBI;AACH,AGTA,AIiCD,KJpEA,IIoEK,MAAL,CAAY,KAAZ,CAAkB,KAAK,MAAvB;AJhCH,AIiCG,GJzEJ,MIyES,MAAL,CAAY,KAAZ,CAAkB,CAAC,KAAK,MAAN,CAAlB;APvBA,AEXA,ACEP,AIiCI,CJ9EE,EIuEI,QPjBE,EEXI,SAAT,CAAmB,QFWnB,GAA4B,KEX5B,EAA0C,IAA1C,EAAqD,aFWf,cAAV,CAA5B;AAEA,AEZI,UAAM,CAAC,EFYJ,CEZY,IFYP,KEZF,CAAS,GAAA,WFYnB;AACH,AEZW,AKmCL,EAAA,GPxC0B,UEKd,QKmCZ,CAAA,OLnC4B,CAAC,CKmC7B,CAAA,GLnCY,CAAuB,IAAvB,EAA6B,IAA7B,AKmCZ,CLnCK,EKmCZ,YAAA;ALlCS,AKmCL,OLrCI,IKqCG,UPzCsB;AO0CzB,MAAA,4BAA4B,EAAE,SAD3B;APzCsB,AEOzB,AKoCA,GP3CR,GEOQ,AKoCA,CLpCC,CAAC,SAAF,GAAc,gBAAgB,AKoCA,CLpCC,CKoCC,QLpChC,cKkCG;APtBX,AEXQ,AKoCA,EPzBR,IOyBQ,EPzBR,CAAA,CEXY,UKoCU,CLpCC,CKoCC,CPzBxB,CAAY,AEXc,IAAI,CAAJ,CFWd,CAAA,AEXJ,SFWR,EAAY,4BAAZ,EAAsC;AEV9B,AKoCI,MLpCJ,EKoCI,CP1BZ,QEVmB,AKoCE,CLp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","file":"App.7a936cda.js","sourceRoot":"..\\..\\src","sourcesContent":["/**\r\n * Determines if the provided Property is set.\r\n * @param {any} property The Property to checked.\r\n * @returns {boolean} If the Property is set <c>true</c> otherwise <c>false</c>.\r\n */\r\nexport default function isset(property: any): boolean {\r\n    return typeof property !== 'undefined' && property != null;\r\n}","import { default as isset } from './isset';\r\n\r\n/**\r\n * Determines if the provided Property is Null or Empty (or whitespace if string-value).\r\n * @param {any} property The Property to checked.\r\n * @returns {boolean} If the Property is Null or Empty or has\r\n * not \"length\" as property <c>true</c> otherwise <c>false</c>.\r\n */\r\nexport default function isNullOrEmpty(property: any): boolean {\r\n    if (!isset(property)) {\r\n        return true;\r\n    }\r\n\r\n    if (typeof property === 'string') {\r\n        return property.trim().length < 1;\r\n    }\r\n\r\n    if (!property.hasOwnProperty('length')) {\r\n        return false;\r\n    }\r\n\r\n    return property.length < 1;\r\n}","import { default as isNullOrEmpty } from './isNullOrEmpty';\r\n\r\n/**\r\n * Get's the Value of a specific Url-Parameter.\r\n * @param {string} parameterName The Name of the searched Parameter.\r\n * @param {string} url The Url which the Parameter-Value is read from (if not set the current Url is used).\r\n * @returns {string|null} If the Parameter exists on the Url the Value is returned as a string.\r\n */\r\nexport default function getUrlParameter(parameterName: string, url: string = null): string|null {\r\n\r\n    if (isNullOrEmpty(url)) {\r\n        url = window.location.href;\r\n    }\r\n\r\n    url = url.toLowerCase();\r\n    let name: string = parameterName.toLowerCase();\r\n    name = name.replace(/[\\[]/, '\\\\\\[').replace(/[\\]]/, '\\\\\\]');\r\n\r\n    const regexS: string = '[\\\\?&]' + name + '=([^&#]*)';\r\n    const regex: RegExp = new RegExp(regexS);\r\n    const results: RegExpExecArray = regex.exec(url);\r\n\r\n    if (results == null) {\r\n        return null;\r\n    }\r\n\r\n    return results[1];\r\n}","import { default as isset } from './isset';\r\n\r\n/**\r\n * Converts an object to a Boolean.\r\n * @param {any} value The Value to be converted to a Boolean.\r\n * @returns {boolean} If the Value is convertable to a Boolean it\r\n * is returned as a Boolean otherwise <c>false</c> is returned.\r\n */\r\nexport default function toBoolean(value: any): boolean {\r\n    if (!isset(value)) {\r\n        return false;\r\n    }\r\n\r\n    if (typeof value === 'boolean') {\r\n        return value;\r\n    }\r\n\r\n    if (typeof value === 'string') {\r\n        value = value.toLowerCase();\r\n    }\r\n\r\n    if ((value !== 'false' && value !== 'true') &&\r\n        (value !== '0' && value !== '1') &&\r\n        (value !== 0 && value !== 1)) {\r\n        return false;\r\n    }\r\n\r\n    return (value === 'false' || value === '0' || value === 0) ? false : true;\r\n}","export { default as getUrlParameter } from './library/getUrlParameter';\r\nexport { default as isNullOrEmpty } from './library/isNullOrEmpty';\r\nexport { default as isset } from './library/isset';\r\nexport { default as toBoolean } from './library/toBoolean';\r\n","\r\nimport { toBoolean, isset, isNullOrEmpty, getUrlParameter } from '../functions';\r\n\r\nconst logsEnabled: IConsoleLoggingEnabled = {\r\n    EnableAll: true,\r\n    EnableError: true,\r\n    EnableInfo: true,\r\n    EnableLog: true,\r\n    EnableTable: true,\r\n    EnableWarn: true\r\n};\r\n\r\nconst DefaultLoggerSettings: ILoggerSettings = {\r\n    LogNamespaceUrlParameterName: 'LogOnly',\r\n    LoggingEnabledUrlParameterName: 'EnableConsoleLogging',\r\n    LoggingEnabled: logsEnabled\r\n};\r\n\r\nexport interface ILoggerSettings {\r\n    LogNamespaceUrlParameterName: string;\r\n    LoggingEnabledUrlParameterName: string;\r\n    LoggingEnabled: IConsoleLoggingEnabled;\r\n}\r\n\r\nexport enum LogType {\r\n    Warning,\r\n    Info,\r\n    Error,\r\n    Table,\r\n    Log\r\n}\r\n\r\nexport interface IConsoleLoggingEnabled {\r\n    EnableAll: boolean;\r\n    EnableLog: boolean;\r\n    EnableInfo: boolean;\r\n    EnableWarn: boolean;\r\n    EnableError: boolean;\r\n    EnableTable: boolean;\r\n}\r\n\r\nexport class Logger {\r\n\r\n    public static DefaultSettings: ILoggerSettings = DefaultLoggerSettings;\r\n\r\n    private _loggingEnabledByUrl: boolean = undefined;\r\n\r\n    private _namespacesToLog: string[] = undefined;\r\n\r\n    private get isLoggingEnabledByUrl(): boolean {\r\n        // URL Parameter already checked, return value from Parameter\r\n        if(isset(this._loggingEnabledByUrl)) {\r\n            return this._loggingEnabledByUrl;\r\n        }\r\n\r\n        // URL Parameter is not checked. Check and set Parameter\r\n        let isEnabledValue: string = getUrlParameter(this.settings.LoggingEnabledUrlParameterName);\r\n\r\n        if (!isset(isEnabledValue)) {\r\n            this._loggingEnabledByUrl = false;\r\n            return this._loggingEnabledByUrl;\r\n        }\r\n\r\n        this._loggingEnabledByUrl = toBoolean(isEnabledValue);\r\n\r\n        return this._loggingEnabledByUrl;\r\n    }\r\n\r\n    private get isLoggingEnabledBySettings(): boolean {\r\n        const enableLog: IConsoleLoggingEnabled = this.settings.LoggingEnabled;\r\n\r\n        return (enableLog.EnableAll || \r\n            enableLog.EnableError || \r\n            enableLog.EnableInfo || \r\n            enableLog.EnableLog || \r\n            enableLog.EnableTable || \r\n            enableLog.EnableWarn);\r\n    }\r\n\r\n    private get namespacesToLogFromUrl(): string[] {\r\n        if(isset(this._namespacesToLog)) {\r\n            return this._namespacesToLog;\r\n        }\r\n\r\n        const modules: string = getUrlParameter(this.settings.LogNamespaceUrlParameterName);\r\n\r\n        if(isNullOrEmpty(modules)) {\r\n            this._namespacesToLog = [];\r\n            return this._namespacesToLog;\r\n        }\r\n\r\n        this._namespacesToLog = modules.toLowerCase().split(',');\r\n        return this._namespacesToLog;\r\n    }\r\n\r\n    constructor(private logNamespace: string, private settings: ILoggerSettings = null) {\r\n        if(!isset(settings)) {\r\n            this.settings = Logger.DefaultSettings;\r\n        }\r\n    }\r\n\r\n    public getCurrentSettings(): ILoggerSettings {\r\n        return {...{}, ...this.settings};\r\n    }\r\n\r\n    public logToConsole(logType: LogType, ...data: any[]): void {\r\n        if (!isset(console)) {\r\n            return;\r\n        }\r\n\r\n        if (!this.isLoggingEnabledBySettings && !this.isLoggingEnabledByUrl) {\r\n            return;\r\n        }\r\n\r\n        //If namespaces are filtered by URL and the current namespace is NOT one of it\r\n        if(!isNullOrEmpty(this.namespacesToLogFromUrl) && \r\n        this.namespacesToLogFromUrl.indexOf(this.logNamespace.toLowerCase()) < 0) {\r\n            return;\r\n        }\r\n\r\n        const valuesToLog: any[] = [...data, this.logNamespace];\r\n        const logEnabled: boolean = this.isLoggingEnabledByUrl || this.settings.LoggingEnabled.EnableAll;\r\n\r\n        switch (logType) {\r\n            case LogType.Warning:\r\n                if (logEnabled || this.settings.LoggingEnabled.EnableWarn) {\r\n                    console.warn(...valuesToLog);\r\n                }\r\n                break;\r\n            case LogType.Info:\r\n                if (logEnabled || this.settings.LoggingEnabled.EnableInfo) {\r\n                    /* tslint:disable:no-console */\r\n                    console.info(...valuesToLog);\r\n                }\r\n                break;\r\n            case LogType.Error:\r\n                if (logEnabled || this.settings.LoggingEnabled.EnableError) {\r\n                    console.error(...valuesToLog);\r\n                }\r\n                break;\r\n            case LogType.Table:\r\n                if (!(logEnabled || this.settings.LoggingEnabled.EnableTable)) {\r\n                    break;\r\n                }\r\n\r\n                if (typeof console.table !== 'function') {\r\n                    /* tslint:disable:no-console */\r\n                    console.info('Your browser does not support console.table, console.log was used instead', this.logNamespace);\r\n                    console.log(...valuesToLog);\r\n                    break;\r\n                }\r\n\r\n                data.forEach((d: any) => {\r\n                    const valueType: string = typeof d;\r\n\r\n                    if (valueType !== 'array' && valueType !== 'object') {\r\n                    /* tslint:disable:no-console */\r\n                        console.info('It is not possible to log table if logValue is not an array or object, console.log was used instead', this.logNamespace);\r\n                        console.log(d, this.logNamespace);\r\n                        return;\r\n                    }\r\n\r\n                    console.table(d, [this.logNamespace]);\r\n\r\n                });\r\n                break;\r\n            case LogType.Log:\r\n            default:\r\n                if (logEnabled || this.settings.LoggingEnabled.EnableLog) {\r\n                    console.log(...valuesToLog);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    public log(...data: any[]): void {\r\n        this.logToConsole(LogType.Log, ...data);\r\n    }\r\n\r\n    public warn(...data: any[]): void {\r\n        this.logToConsole(LogType.Warning, ...data);\r\n    }\r\n\r\n    public info(...data: any[]): void {\r\n        this.logToConsole(LogType.Info, ...data);\r\n    }\r\n\r\n    public error(...data: any[]): void {\r\n        this.logToConsole(LogType.Error, ...data);\r\n    }\r\n\r\n    public table(...data: any[]): void {\r\n        this.logToConsole(LogType.Table, ...data);\r\n    }\r\n\r\n    public static Log(logNamespace: string, logType: LogType, ...data: any[]): void {\r\n        const logger: Logger = new Logger(logNamespace);\r\n        switch (logType) {\r\n            case LogType.Error:\r\n                logger.error(...data);\r\n                break;\r\n            case LogType.Info:\r\n                logger.info(...data);\r\n                break;\r\n            case LogType.Table:\r\n                logger.table(...data);\r\n                break;\r\n            case LogType.Warning:\r\n                logger.warn(...data);\r\n                break;\r\n            case LogType.Log:\r\n            default:\r\n                logger.log(...data);\r\n                break;\r\n        }\r\n    }\r\n}","import { LogType, Logger, IConsoleLoggingEnabled, ILoggerSettings } from '../Logger';\r\n\r\nexport const logFunc: (target: any, enableConsoleLogging: IConsoleLoggingEnabled, loggingCategory: string, logType: LogType, ...logData: any[]) => void =\r\n(target: any, enableConsoleLogging: IConsoleLoggingEnabled, loggingCategory: string, logType: LogType, ...logData: any[]): void => {\r\n    const containsLogger: boolean = typeof target['logger'] === 'object'; // && (target as any).getLogger() instanceof Logger;\r\n    let loggingSettings: any = containsLogger ? (target as any).logger.getCurrentSettings() : Logger.DefaultSettings;\r\n    loggingSettings.LoggingEnabled = enableConsoleLogging;\r\n    const logger: Logger = new Logger(loggingCategory, loggingSettings);\r\n    logger.logToConsole(logType, ...logData);\r\n};\r\n\r\nexport const getLogCategoryOrCustom: (target: any, customLogCategory?: string, fallbackValue?: string) => any = (target: any, customLogCategory: string = null, fallbackValue: string = '') => {\r\n    let loggingCategory: string = '';\r\n\r\n    if (typeof customLogCategory === 'string') {\r\n        loggingCategory = customLogCategory;\r\n    } else {\r\n        const containsLoggingCategory: boolean = typeof target['getLogCategory'] === 'function' && typeof (target as any).getLogCategory() === 'string';\r\n        loggingCategory = containsLoggingCategory ? (target as any).getLogCategory() : fallbackValue;\r\n    }\r\n\r\n    return loggingCategory;\r\n};\r\n\r\nexport const getLogSettings: () => ILoggerSettings = (): ILoggerSettings => {\r\n    return Logger.DefaultSettings;\r\n};","import { LogType, IConsoleLoggingEnabled, Logger, ILoggerSettings } from '../Logger';\r\nimport { IClassLoggerDecoratorOptions } from './options.decorators';\r\nimport { getLogCategoryOrCustom, logFunc as logFuncUtil, getLogSettings } from './decorators.utility';\r\n\r\nconst defaultOptions: IClassLoggerDecoratorOptions = {\r\n    customLogCategory: null,\r\n    enableConsoleLogging: null,\r\n    override: true\r\n};\r\n\r\n//TODO: Check for generic classes MyClass<T>...\r\n\r\n/**\r\n* A Class logger dexorator\r\n* For Intellisense with the @classLogger(), use this:\r\n* @example export interface MyClass extends LoggerBase {}; export class MyClass;\r\n*/\r\nexport const classLogger: (options: IClassLoggerDecoratorOptions) => any = (options: IClassLoggerDecoratorOptions = null): any => {\r\n\r\n    options = {...defaultOptions, ...options};\r\n\r\n    const classLoggerFunc: <T extends { new(...args: any[]) }>(Base: T) => any = <T extends { new(...args: any[]) }>(Base: T): any => {\r\n        // save a reference to the original constructor\r\n        const original: T = Base;\r\n        const fallbackName: string = (original as any) && (original as any).name ? (original as any).name : '';\r\n\r\n        const enableConsoleLogging: IConsoleLoggingEnabled = options.enableConsoleLogging || Logger.DefaultSettings.LoggingEnabled;\r\n        const loggingCategory: string = getLogCategoryOrCustom(original, options.customLogCategory, fallbackName);\r\n\r\n        const getLogCategoryFunc: () => string = (): string => {\r\n            return getLogCategoryOrCustom(original, options.customLogCategory, fallbackName);\r\n        };\r\n\r\n        const logFunc: (logType: LogType, ...logData: any[]) => void = (logType: LogType, ...logData: any[]): void => {\r\n            logFuncUtil(original, enableConsoleLogging, loggingCategory, logType, ...logData);\r\n        };\r\n\r\n        const logSettingsFunc: () => ILoggerSettings = (): ILoggerSettings => {\r\n            return getLogSettings();\r\n        };\r\n\r\n        if (options.override) {\r\n            original.prototype.getLogCategory = getLogCategoryFunc;\r\n            original.prototype.log = logFunc;\r\n            original.prototype.getLogSettings = logSettingsFunc;\r\n        } else {\r\n            original.prototype.getLogCategory = original.prototype.getLogCategory || getLogCategoryFunc;\r\n            original.prototype.log = original.prototype.log || logFunc;\r\n            original.prototype.getLogSettings = original.prototype.getLogSettings || logSettingsFunc;\r\n        }\r\n\r\n        // a utility function to generate instances of a class\r\n        function construct(classConstructor: any, args: any[]): any {\r\n            const c: any = function (): any {\r\n                return classConstructor.apply(this, args);\r\n            };\r\n            c.prototype = classConstructor.prototype;\r\n            let instanceObj = new c();\r\n            instanceObj.logger = new Logger(instanceObj.getLogCategory(), instanceObj.getLogSettings());\r\n            return instanceObj;\r\n        }\r\n\r\n        // the new constructor behaviour\r\n        const f: any = (...args: any[]): any => {\r\n            return construct(original, args);\r\n        };\r\n\r\n        // copy prototype so intanceof operator still works\r\n        f.prototype = original.prototype;\r\n\r\n        // return new constructor (will override original)\r\n        return f;\r\n    };\r\n\r\n    return classLoggerFunc;\r\n};","import { LogType, IConsoleLoggingEnabled, Logger } from '../Logger';\r\nimport { getLogCategoryOrCustom, logFunc as logFuncUtil } from './decorators.utility';\r\nimport { IMethodLoggerDecoratorOptions } from './options.decorators';\r\n\r\nconst defaultOptions: IMethodLoggerDecoratorOptions = {\r\n    customLogCategory: null,\r\n    enableConsoleLogging: null\r\n};\r\n\r\nexport const methodLogger: (options: IMethodLoggerDecoratorOptions) => any = (options: IMethodLoggerDecoratorOptions = null): any => {\r\n\r\n    options = {...defaultOptions, ...options};\r\n    \r\n    return (target: Object, propertyKey: string, descriptor: TypedPropertyDescriptor<Function>): any => {\r\n\r\n        const originalMethod: any = descriptor.value!;\r\n\r\n        descriptor.value = function(): any {\r\n            \r\n            \r\n            let enableConsoleLogging: IConsoleLoggingEnabled = options.enableConsoleLogging || Logger.DefaultSettings.LoggingEnabled;\r\n            const loggingCategory: string = getLogCategoryOrCustom(target, options.customLogCategory, propertyKey);\r\n\r\n            const logFunc: (logType: LogType, ...logData: any[]) => void = (logType: LogType, ...logData: any[]): void => {\r\n                logFuncUtil(target, enableConsoleLogging, loggingCategory, logType, ...logData);\r\n            };\r\n\r\n            const containsLoggingEnabled: boolean = typeof enableConsoleLogging !== 'undefined' && enableConsoleLogging !== null;\r\n            enableConsoleLogging = containsLoggingEnabled ? enableConsoleLogging : Logger.DefaultSettings.LoggingEnabled;\r\n\r\n            if (arguments && arguments.length > 0) {\r\n                logFunc(LogType.Log, [`${propertyKey} START with params`, arguments]);\r\n            } else {\r\n                logFunc(LogType.Log, `${propertyKey} START`);\r\n            }\r\n\r\n            const result: any = originalMethod.apply(this, arguments);\r\n\r\n            if(!(result instanceof Promise)) {\r\n                logFunc(LogType.Log, `${propertyKey} END`);\r\n                return result;\r\n            }\r\n\r\n            return Promise.resolve(result).then((value) => {\r\n                logFunc(LogType.Log, `${propertyKey} END`);\r\n                return value;\r\n            }).catch((error) => {\r\n                logFunc(LogType.Error, `ERROR occurred in ${propertyKey}`);\r\n                logFunc(LogType.Error, error);\r\n                logFunc(LogType.Log, `${propertyKey} END`);\r\n                return Promise.reject(error);\r\n            });\r\n        };\r\n    };\r\n};","import { LogType, IConsoleLoggingEnabled, Logger } from '../Logger';\r\nimport { getLogCategoryOrCustom, logFunc as logFuncUtil } from './decorators.utility';\r\nimport { IPropertyLoggerDecoratorOptions } from './options.decorators';\r\n\r\nconst defaultOptions: IPropertyLoggerDecoratorOptions = {\r\n    customLogCategory: null,\r\n    enableConsoleLogging: null\r\n};\r\n\r\nexport const propertyLogger: (options?: IPropertyLoggerDecoratorOptions) => any = (options: IPropertyLoggerDecoratorOptions = null): any => {\r\n\r\n    options = {...defaultOptions, ...options};\r\n\r\n    return (target: Object, propertyName: string) => {\r\n\r\n        let enableConsoleLogging: IConsoleLoggingEnabled = options.enableConsoleLogging || Logger.DefaultSettings.LoggingEnabled;\r\n        const loggingCategory: string = getLogCategoryOrCustom(target, options.customLogCategory, `${target.constructor['name']}.${propertyName}`);\r\n\r\n        const logFunc: (logType: LogType, ...logData: any[]) => void = (logType: LogType, ...logData: any[]): void => {\r\n            logFuncUtil(target, enableConsoleLogging, loggingCategory, logType, ...logData);\r\n        };\r\n\r\n        const containsLoggingEnabled: boolean = typeof enableConsoleLogging !== 'undefined' && enableConsoleLogging !== null;\r\n        enableConsoleLogging = containsLoggingEnabled ? enableConsoleLogging : Logger.DefaultSettings.LoggingEnabled;\r\n\r\n        // property value\r\n        let _val: any = (target as any)[propertyName];\r\n\r\n        // property getter method\r\n        const getter: any = () => {\r\n            logFunc(LogType.Log, `Get: ${propertyName} => ${_val}`);\r\n            return _val;\r\n        };\r\n\r\n        // property setter method\r\n        const setter: any = newVal => {\r\n            logFunc(LogType.Log, `Set: ${propertyName} => ${newVal}`);\r\n            _val = newVal;\r\n        };\r\n\r\n        // Delete property.\r\n        if (delete ((target as any)[propertyName])) {\r\n\r\n            // Create new property with getter and setter\r\n            Object.defineProperty(target, propertyName, {\r\n                get: getter,\r\n                set: setter,\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n        }\r\n    };\r\n};","import { classLogger } from './class.decorators';\r\nimport { methodLogger } from './method.decorators';\r\nimport { IClassLoggerDecoratorOptions, IMethodLoggerDecoratorOptions, IPropertyLoggerDecoratorOptions } from './options.decorators';\r\nimport { propertyLogger } from './property.decorators';\r\n\r\n// decorator factory - which calls the corresponding decorators based on arguments passed\r\nexport const log: (options?: IMethodLoggerDecoratorOptions|IClassLoggerDecoratorOptions|IPropertyLoggerDecoratorOptions) => any = (options: IMethodLoggerDecoratorOptions|IClassLoggerDecoratorOptions|IPropertyLoggerDecoratorOptions = null): any => {\r\n\r\n    const factoryFunction: (...args: any[]) => any = (...args: any[]): any => {\r\n        switch (args.length) {\r\n            case 3: // can be method or property decorator\r\n                if (typeof args[2] === 'number' || typeof args[2] === 'undefined') {\r\n                    return propertyLogger(options).apply(this, args);\r\n                }\r\n                return methodLogger(options).apply(this, args);\r\n            case 2: // parameter decorator\r\n                return propertyLogger(options).apply(this, args);\r\n            case 1: // class decorator\r\n                // return classLogger.apply(this, args);\r\n                return classLogger(options).apply(this, args);\r\n            default: // invalid size of arguments\r\n                throw new Error('Not a valid decorator');\r\n        }\r\n    };\r\n\r\n    return factoryFunction;\r\n};","export { Logger, ILoggerSettings, LogType, IConsoleLoggingEnabled } from \"./library/Logger\";\r\nexport { log } from './library/decorators/logFactory.decorators';","// import { Logger } from 'typescript-console-logger';\r\nimport { Logger, ILoggerSettings } from '../../src/index';\r\nimport { log } from '../../src/library/decorators/logFactory.decorators';\r\nimport { LoggerBase } from '../../src/library/LoggerBase';\r\nimport { ILogger } from '../../src/library/ILogger';\r\n\r\nclass TestApp {\r\n    private logger: Logger;\r\n\r\n    constructor() {\r\n        this.logger = new Logger(\"spfxAppDev\");\r\n    }\r\n\r\n    public doThings(): void {\r\n        this.logger.log(\"doThings START\");\r\n        this.logger.log(\"Hello World\");\r\n        this.logger.log(\"doThings END\");\r\n    }\r\n\r\n    public doThingsWithParam(a: string, b: number): void {\r\n        this.logger.log(\"doThingsWithParam START\", a, b);\r\n        this.logger.log(\"Hello World\");\r\n        this.logger.log(\"doThingsWithParam END\", a, b);\r\n    }\r\n\r\n    public examples(): void {\r\n        this.logger.log(\"Welcome to @spfxappdev/logger\");\r\n        this.logger.warn(\"Welcome to @spfxappdev/logger\");\r\n        this.logger.info(\"Welcome to @spfxappdev/logger\");\r\n        this.logger.error(\"Welcome to @spfxappdev/logger\");\r\n        this.logger.table([\"Welcome to @spfxappdev/logger\"]);\r\n    }\r\n}\r\n\r\nconst myLoggerSettings: ILoggerSettings = {\r\n    LogNamespaceUrlParameterName: 'LogOnlyMy',\r\n    LoggingEnabledUrlParameterName: 'EnableLogging',\r\n    LoggingEnabled: {\r\n        EnableAll: false,\r\n        EnableError: true,\r\n        EnableInfo: false,\r\n        EnableLog: false,\r\n        EnableTable: false,\r\n        EnableWarn: true\r\n    }\r\n}\r\n\r\nLogger.DefaultSettings = myLoggerSettings;\r\n\r\nconst t: TestApp = new TestApp();\r\nt.doThings();\r\nt.doThingsWithParam(\"Hello console logger number\", 1);\r\nt.examples();\r\n\r\n//For Intellisense with the @classLogger(), use this:\r\ninterface TestAppWithDecorators extends ILogger { }\r\n     \r\n\r\n@log({\r\n    customLogCategory: \"myCustomLoggingCategory\",\r\n    override: false\r\n})\r\nclass TestAppWithDecorators {\r\n\r\n    @log()\r\n    public myProp: string = \"\";\r\n\r\n    @log()\r\n    public doThings(): void {\r\n        this.logger.log(\"Hello World\");\r\n    }\r\n\r\n    @log()\r\n    public doThingsWithParam(a: string, b: number): void {\r\n        this.logger.log(\"doThingsWithParam START\", a, b);\r\n        this.logger.log(\"Hello World\");\r\n        this.logger.log(\"doThingsWithParam END\", a, b);\r\n    }\r\n\r\n    @log()\r\n    public examples(): void {\r\n        this.myProp = \"Welcome to @spfxappdev/logger\";\r\n        this.logger.log(this.myProp);\r\n        this.logger.warn(this.myProp);\r\n        this.logger.info(this.myProp);\r\n        this.logger.error(this.myProp);\r\n        this.logger.table([this.myProp]);\r\n    }\r\n\r\n    public getLogSettings(): ILoggerSettings {\r\n        return {\r\n            LogNamespaceUrlParameterName: 'LogOnly',\r\n            LoggingEnabledUrlParameterName: 'EnableConsoleLogging',\r\n            LoggingEnabled: {\r\n                EnableAll: false,\r\n                EnableError: true,\r\n                EnableInfo: false,\r\n                EnableLog: true,\r\n                EnableTable: false,\r\n                EnableWarn: true\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\nconst t2: TestAppWithDecorators = new TestAppWithDecorators();\r\nt2.doThings();\r\nt2.doThingsWithParam(\"Hello console logger number\", 1);\r\nt2.examples();\r\nconsole.log(t2 instanceof TestAppWithDecorators);\r\n"]}